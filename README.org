
[[https://github.com/DiceDuckMonkOrg/kamogawa/actions/workflows/google-cloudrun-docker.yml][https://github.com/DiceDuckMonkOrg/kamogawa/actions/workflows/google-cloudrun-docker.yml/badge.svg]]

This web UI offers robust search of assets across GCP, AWS and
Azure. Where it makes sense, we further enrich and streamline
additional segments of the user journey that are undeserved by incumbents.

** Product

*** Virtues
#+BEGIN_SRC plaintext
performance           i.e. pages loads fast, runs fast
basic UI              think Craigslist/HackerNews
mobile-first     
global                multi-cloud, cross-region, cross-Project, cross-Account
minimal               quality over comprehensiveness 
accessibility         access is the most important part of any workflow
#+END_SRC

*** Facets

- Visibility (billing , opaque)
- Context
- Colloboration

** Development 

*** Directory structure

#+BEGIN_SRC plaintext
├── .github           CI/CD on Github Actions
├── .VScode           Presets for VScode
├── e2e               Test automation w/ headless browser. Node.js, Playwright.
├── src               App Server which sends SSR HTML. Go, Gin Web Framework. 
├── team              Notes on PM and R&D
└── tool_babbler      Tool to generate mock data for DB.
#+END_SRC

Additional =README= are in-situ, in-context.

*** Getting started            

[[https://en.wikipedia.org/wiki/Make_(software)][GNU Makefile]] encapsulates canonical tasks.

#+BEGIN_SRC plaintext
└─ ▶ make help
help                 This help command.
cloc                 Total SLOC w/ Tokei. Prereq: `brew install tokei`
cloc_go              Naive SLOC of Go code.
dev_clean            Run dev setup from clean slate.
dev                  Run dev setup from cache. Runs: PSQL DB + live-reloading App Server.
build                Build w/ tag for GCR.
deploy               Build and deploy to GCR (incorporates `make build`).
go_clean             Cleans up Go code.
test_prod            Visual regression testing of prod.
#+END_SRC

/see:/ =make dev=

*** Toolchain 
- Go @ 1.17+
- Postgres CLI @ 13+
- Node.js, npx, npm, [[https://playwright.dev/][Playwright]]
- Docker 
- Docker Compose
- GNU Make
- [[https://cloud.google.com/sdk/gcloud][gcloud CLI]]

** Production

*** Cloud Architecture

Key services are [[https://console.cloud.google.com/run/detail/us-west1/hakata/metrics?project=linear-cinema-360910][CloudRun]] and [[https://console.cloud.google.com/sql/instances/osaka-mainichi/overview?project=linear-cinema-360910][Postgres CloudSQL]] in a single 
region. CloudRun serves App Server which is built for horizontally scale. We intend for Postgres-based DB to vertically scale,
plus regional and read-replicas but no sharding. This affords us medium-long term runway and by then we'd have evaluated the product-case for Lucene. 

|                                   | Resource name                                                | Description                        |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| ProjectID                         | linear-cinema-360910                                         |                                    |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| CloudRun Service                  | $PID/locations/us-west1/services/hakata                      | App Server                         |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| CloudSQL Instance                 | $PID/osaka-mainichi                                          | PSQL13, 10.73.16.6 ( private )     |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
|                                   | osaka-mainichi-read-replica                                  |                                    |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| CloudSQL Main DB                  | shimogawa_db                                                 |                                    |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| GitHub Actions Service Account    | github-actions-service-account                               |                                    |
|                                   | @linear-cinema-360910.iam.gserviceaccount.com                | Storage Buckets IAM                |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| Container Registry                | gcr.io/linear-cinema-360910/niigata                          |                                    |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| VPC Connector                     | $PID/locations/us-west1/connectors/tohoku-vpc-for-cloudrun   | Makes CloudSQL visible to CloudRun |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| VPC Network                       | default                                                      | VPC network connector is in        |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| Load Balancer                     | paulwally                                                    |                                    |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| LB Frontend #1                    | doraqueen                                                    | https://35.244.188.48              |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| LB Frontend #2                    | queenbee                                                     | http://34.149.56.86                |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| Frontend HTTPS cert               | cent50                                                       |                                    |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| LB Backend Service                | omggcp                                                       |                                    |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| Serverless Network Endpoint Group | idk                                                          |                                    |
|-----------------------------------|--------------------------------------------------------------|------------------------------------|
| CloudBuild Trigger                | rmgpgab-hakata-us-west1-diceduckmonk-kamogawa--maewn         | GitHub authenticated. Deprecated.  |

*** Deployment 

/see:/ =make build= and =make deploy= commands defined in [[Makefile][Makefile]].

The /telos/ of these commands is to deposit a Docker image in GCR. 

**** Continuous Build

[[.github/workflows/google-cloudrun-docker.yml][google-cloudrun-docker.yml]] configures GitHub Actions 
to continuously build and deploy. It tags GCR Docker image with the commit hash.

**** Manual Deploy

This process is not covered in CI/CD. We intend for it to be intentional with manual verification. 

Deploy a CloudRun =Revision= by associating with a GCR Docker Image. 
=ENV= variables are expected. /See:/ =config.env= for the local environment equivalent.

**** Prod 

/note:/ =ENV= for DB URL is 
=postgres://postgres:dog@10.73.16.3:5432/shimogawa_db=

For all intensive purposes, default URL provided by CloudRun is not useful.
Only =http://localhost= and =https://diceduckmonk.com= are legitimized for our Google Auth Credentials.

*** Debug

#+BEGIN_SRC bash
$ psql -h localhost -p 5432 -U local-dev -d shimogawa_db # docker compose
$ psql -h 10.73.16.6 -p 5432 -U postgres -d shimogawa_db # prod from compute VM
#+END_SRC

#+BEGIN_SRC bash
docker compose up
#+END_SRC

*** Format code

#+BEGIN_SRC bash
go fmt
#+END_SRC

The VSCode Go extension also does linting

*** Deploying 

This currently won't actually work because there is no Postgres DB running alongside the server

#+BEGIN_SRC bash
docker build -t kamogawa1337 .
#+END_SRC

#+BEGIN_SRC bash
docker run kamogawa1337
#+END_SRC

*** Cleaning up old dependencies 

#+BEGIN_SRC bash
docker compose run --rm app go mod tidy
#+END_SRC

*** IDE 

VScode + the "Go" extension ( it will ask you to install a bunch of transitive 
dependencies ) is great. 

*** Running Natively 

To run natively means to run the binary. First, build the binary.

#+BEGIN_SRC bash
$ go build 
#+END_SRC

That would output a file ( based on the pkg name of our main program ) 
#+BEGIN_SRC bash
$ find kamogawa
#+END_SRC

If you tried to run this:

#+BEGIN_SRC bash
$ ./kamogawa
#+END_SRC

You may see error message about environment variables such $SHIMOGAWA_URL
not being set. In the Docker compose yml, you may see the environment variable 
supply. You can try setting a similar value on your machine.

```
  export SHIMOGAWA_URL=postgres://local-dev@shimogawa_service:5432/shimogawa_db
```

When you run the program, you may see errors about connecting to the DB. 
Make sure the postgres instance you run locally on your machine is on port 5432,
has a db named shimogawa_db, and has the role user 'local-dev'

Originally, the application binary looked up on the file system ( your native machine )
for files using relative paths. If you moved the binary file, ran it someone else, 
those look ups would fail. It would also fail if your machine simply don't have those files,
i.e. you deploy the binary to a cloud VM but forgot to upload the files alongside.

Since then, we've utilized Go's embedded filesystem which bakes file such as 
HTML, CSS, directly into the Go application binary, such that the binary is 
self contained. We don't even need Docker, just the postgres connection.

### Deploy 

gBuild and tag container. There is bug with CloudRun and M1 macs. Linux platform must be 
specified if using m1 mac.


Push to Google Container Registry 

#+BEGIN_SRC bash
docker push gcr.io/linear-cinema-<retroactively_redacted>/goku
#+END_SRC

It's worth noting the CloudRun Servicem which hosts 
a list of containers specify 3 ENV variables. 
One is for JWT_SECRET which is the same everywhere.

The Postgres DB depends on environment. 
Remotely, it is: postgres://<retroactively_redacted>:<retroactively_redacted>@<retroactively_redacted>/shimogawa_db

Finally, the $HOST env variable affects setting cookie .
Locally, the $HOST is localhost. Remotely, it depends on 
if it is cloud run or hosted domain.
<retroactively_redacted>.a.run.app

*** Logging 

Use log, not fmt.Printf

***  Debugging 

#+BEGIN_SRC bash
$ psql -h localhost -p 5432 -U local-dev -d shimogawa_db #local
$ psql -h <retroactively_redacted> -p 5432 -U postgres -d shimogawa_db # prod
#+END_SRC

***  Run docker compose with no cache 

https://code.visualstudio.com/docs/languages/go#:~:text=Using%20the%20Go%20extension%20for,from%20the%20VS%20Code%20Marketplace.
#+BEGIN_SRC bash
$ docker compose build --no-cache && docker-compose up
#+END_SRC
