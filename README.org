
[[https://github.com/DiceDuckMonkOrg/kamogawa/actions/workflows/google-cloudrun-docker.yml][https://github.com/DiceDuckMonkOrg/kamogawa/actions/workflows/google-cloudrun-docker.yml/badge.svg]]

This web UI offers robust search of assets across GCP, AWS and
Azure. Where it makes sense, we further enrich and streamline
additional segments of the user journey that are undeserved by incumbents.

** Product

*** Virtues
#+BEGIN_SRC plaintext
performance           i.e. pages loads fast, runs fast
anti-modern           think Craigslist/HackerNews
mobile-first     
global                multi-cloud, cross-region, cross-Project, cross-Account
minimal               quality over comprehensiveness 
accessibility         access is the most important part of any workflow
#+END_SRC

*** Facets

- Visibility (billing , opaque)
- Context
- Colloboration

** Development 

*** Directory structure

#+BEGIN_SRC plaintext
├── .github           CI/CD on Github Actions
├── .VScode           Presets for VScode
├── e2e               Test automation w/ headless browser. Node.js, Playwright.
├── src               App Server which sends SSR HTML. Go, Gin Web Framework. 
├── team              Notes on PM and R&D
└── tool_babbler      Tool to generate mock data for DB.
#+END_SRC

Additional =README= are in-situ, in-context.

*** Getting started            

[[https://en.wikipedia.org/wiki/Make_(software)][GNU Makefile]] encapsulates canonical tasks.

#+BEGIN_SRC plaintext
└─ ▶ make help
help                 This help command.
cloc                 Total SLOC w/ Tokei. Prereq: `brew install tokei`
cloc_go              Naive SLOC of Go code.
dev_clean            Run dev setup from clean slate.
dev                  Run dev setup from cache. Runs: PSQL DB + live-reloading App Server.
build                Build w/ tag for GCR.
deploy               Build and deploy to GCR (incorporates `make build`).
go_clean             Cleans up Go code.
test_prod            Visual regression testing of prod.
#+END_SRC

/see:/ =make dev=

*** Toolchain 
- Go @ 1.17+
- Postgres CLI @ 13+
- Node.js, npx, npm, [[https://playwright.dev/][Playwright]]
- Docker 
- Docker Compose
- GNU Make
- [[https://cloud.google.com/sdk/gcloud][gcloud CLI]]

** Production

*** Cloud Architecture

Key services are [[https://console.cloud.google.com/run/detail/us-west1/hakata/metrics?project=linear-cinema-360910][CloudRun]] and [[https://console.cloud.google.com/sql/instances/osaka-mainichi/overview?project=linear-cinema-360910][Postgres CloudSQL]] in a single 
region. CloudRun serves App Server which is built for horizontally scale. We intend for Postgres-based DB to vertically scale,
plus regional and read-replicas but no sharding. This affords us medium-long term runway and by then we'd have evaluated the product-case for Lucene. 

| Type                              | Resource name                                                                            | Description                                                                                       |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| Account                           | <retroactively_redacted>                                                                 |                                                                                                   |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| ECS > Cluster > Fargate           | kamogawa-cluster                                                                         |                                                                                                   |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| ECS > Cluster > Service           | kamogawa-service1                                                                        |                                                                                                   |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| ECS > Cluster > Task Definition   | kamogawa-task                                                                            | Container, env vars, host -> container port forwarding                                            |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| EC2 > Application Load Balancer   | kamogawa-load-balancer                                                                   | HTTP:80 -> HTTPS:443, HTTPS:443 -> kamogawa-target-group, SSL Cert                                |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| EC2 > ALB > Target Group          | kamogawa-target-group                                                                    | Listens for HTTP:443 since ALB decrypts, cluster automatically registers EC2 instances as targets |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| EC2 > Security Group              | <retroactively_redacted>                                                                 | Inbound: HTTP 80 all, HTTPS:443 all, Outbound: IPv4 all, PostgreSQL:5432 sg-074                   |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
|                                   | <retroactively_redacted>                                                                 | Inbound: PostgreSQL:5432 sg-099, Outbound: IPv4 all                                               |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| Relational Database Service       | test-db:test_db                                                                          | PSQL14.4, username: postgres, password: postgres                                                  |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| Elastic Container Registry        | ddm-repo:latest                                                                          |                                                                                                   |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| AWS Certificate Manager           | <retroactively_redacted>                                                                 | *.diceduckmonk.com                                                                                |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| Google Domain                     | diceduckmonk.com                                                                         | DNS forwards to Route 53 namespace, ddm.com -> https://www.ddm.com                                |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| Route 53 > Hosted Zone            | https://www.diceduckmonk.com                                                             | https://www.ddm.com -> kamogawa-load-balancer                                                     |
|-----------------------------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| GitHub Actions Service Account    | github-actions-service-account                                                           |                                                                                                   |

*** Deployment 

/see:/ =make build= and =make deploy= commands defined in [[Makefile][Makefile]].

The /telos/ of these commands is to deposit a Docker image in GCR. 

**** Continuous Build

[[.github/workflows/google-cloudrun-docker.yml][google-cloudrun-docker.yml]] configures GitHub Actions 
to continuously build and deploy. It tags GCR Docker image with the commit hash.

**** Manual Deploy

This process is not covered in CI/CD. We intend for it to be intentional with manual verification. 

Deploy a CloudRun =Revision= by associating with a GCR Docker Image. 
=ENV= variables are expected. /See:/ =config.env= for the local environment equivalent.

**** Prod 

/note:/ =ENV= for DB URL is 
=postgres://<retroactively_redacted>:<retroactively_redacted>@<retroactively_redacted>:5432/shimogawa_db=

For all intensive purposes, default URL provided by CloudRun is not useful.
Only =http://localhost= and =https://diceduckmonk.com= are legitimized for our Google Auth Credentials.

*** Debug

#+BEGIN_SRC bash
$ psql -h localhost -p 5432 -U local-dev -d shimogawa_db # docker compose
$ psql -h <retroactively_redacted> -p 5432 -U postgres -d shimogawa_db # prod from compute VM
#+END_SRC

#+BEGIN_SRC bash
docker compose up
#+END_SRC
