{{define "javascript"}}
<script>
  // Only show one dropdown at a time.
  const dropdowns = document.querySelectorAll(".dropdown");
  dropdowns.forEach((dropdown) => {
    dropdown.addEventListener("click", (e) => {
      e.stopPropagation();
      dropdowns.forEach((c) => c.classList.remove("is-active"));
      dropdown.classList.add("is-active");
    });
  });

  $$ = i => document.getElementById(i);
  l = (el, ev, f) => el && el.addEventListener(ev, f);
  w = u => window.location.href = u;
  s = q => w(`/search?q=${encodeURI(q)}`)
  elPD = $$('profile-dropdown')
  rm = (el, c) => el && el.classList.remove(c);
  ad = (el, c) => el && el.classList.add(c);

  // Focus and blur from input
  const elTopSearchInput = $$('search-bar-input');
  document.addEventListener('keyup', e => {
    if (e.code == 'Slash') {
      if (elTopSearchInput != document.activeElement) {
        e.preventDefault();
        elTopSearchInput.focus();
      }
    } else if (e.code == 'Escape') {
      if (elTopSearchInput == document.activeElement) {
        // e.preventDefault(); This messes up with default tab order.
        elTopSearchInput.blur();
      }
    }
  });

  // Submit form
  l($$('search-bar-input'), 'keyup', e => {
    if (e.code == 'Enter') {
      e.preventDefault();
      s(e.target.value);
    }
  });

  elSearchFilter = $$('search-filter')
  elSearchCount = $$('search-count')
  let showSearchCount = true;
  l($$('search-tools'), 'click', e => {
    if (showSearchCount) {
      elSearchFilter.classList.remove('ninja');
      elSearchCount.classList.add('ninja');
    } else {
      elSearchFilter.classList.add('ninja');
      elSearchCount.classList.remove('ninja');
    }
    showSearchCount = !showSearchCount;
  });

  elExportYes = $$('export-csv-yes')
  elExportNo = $$('export-csv-no')
  let exportable = false;
  l($$("export-checkbox-projects"), 'change', e => {
    exportable = e.target.checked;
    if (exportable) {
      elExportYes.classList.remove('ninja');
      elExportNo.classList.add('ninja');
    } else {
      elExportYes.classList.add('ninja');
      elExportNo.classList.remove('ninja');
    }
  });

  l(document, 'click', e=>  {
    var container = document.querySelectorAll(".status-button");
    let is = false;
    container.forEach(c => {
      if(c == e.target) {
        is = true;
      }
    })

    if (!is) {

      // if(container.has(e.target).length === 0) {
        document.querySelectorAll('.dropdown').forEach(x => {
          x.classList.remove('is-active');
        });
    }
  });

  // Toggle dark overlay on the content section.
  document.querySelectorAll('.dropdown').forEach(x => {
    l(x, 'click', e => {
      const wrappers = document.querySelectorAll('.content-wrapper');
      wrappers.forEach(w => {
        w.classList.add('overlay');
      });
      e.stopPropagation();
    });
  });
   
  l(document, "click", e => {
    console.log('here')
    if (!e.target.classList.contains('dropdown')) {
      console.log('okay');
      const wrappers = document.querySelectorAll('.content-wrapper');
      wrappers.forEach(w => {
        w.classList.remove('overlay');
      });
    }
  });

  document.querySelectorAll(".status-button:not(.open)").forEach(el => {
    l(el, "click", e => {
      const oa = document.querySelectorAll('.overlay-app');
      oa.forEach( ee => {
        ee.classList.add("is-active");
      });
    });
  });


  // Should limit to popup closed.
  document.querySelectorAll('.close').forEach(gg => {
    l(gg, 'click', _ => {
      const oa = document.querySelectorAll('.overlay-app');
    oa.forEach( ee => {
      ee.classList.remove("is-active");
    });
    });
  });

  document.querySelectorAll(".status-button:not(.open)").forEach(el => {
    l(el, 'click', () => {
      document.querySelectorAll(".pop-up").classList.add("visible");
    });
  });

  document.querySelectorAll(".pop-up .close").forEach( el =>  {
    l(el, 'click', _ => {
      document.querySelectorAll(".pop-up").classList.remove("visible");
    });
  });

  l($$('control-center-lightswitch'), 'click', () => {
    const isLight = document.body.classList.contains('light-mode');
    document.body.classList.toggle('light-mode');
    console.log(isLight);
    localStorage.setItem('kubrick-daytime', !isLight);
  });
  if (localStorage.getItem('kubrick-daytime') == 'true') {
    document.body.classList.add('light-mode');
  }

  l($$('search-filter-date-placeholder'), 'click', e => {
    $$('search-filter-date-dropdown').classList.remove('ninja');
  });
  l($$('search-filter-date-active'), 'click', e => {
    $$('search-filter-date-dropdown').classList.add('ninja');
  });

  window.history.replaceState({}, '', window.location.href);

  const $elSlot = $$('frame-content');
  // TODO: cancel any outstanding backing loads. i.e. load app engine, then load something else,
  // then app engine comes back.
  // Sonic.js
  let t = Date.now();
  let T_THRESHOLD = 500; // minimum milliseconds to show spinner for

  // To prevent background requests from racing and applied to page too late.
  let mostRecentPage = null;
  let abortCtrl;
  var $onic = (url, updateHistory) => {
    if (!$elSlot) { window.location.href = url; return; }
    if (abortCtrl) {
      abortCtrl.abort();
    }
    mostRecentPage = url;

    // rm($$('control-center-spinner'), 'ninja'); // TODO: deprecate spinner
    rm($$('sonic-linear-waiting'), 'ninja');
    $elSlot.classList.add('pre-animation');

    t = Date.now();
    abortCtrl = new AbortController();
    const signal = abortCtrl.signal;
    return fetch(url, { signal })
      .then(res => res.text())
      .then(res => {
        if (url != mostRecentPage) {
          return;
        }
        $elSlot.innerHTML = new window.DOMParser().parseFromString(res, 'text/html').getElementById('frame-content').innerHTML;
        $elSlot.classList.remove('pre-animation');
        const elapsed = Date.now() - t;
        const earlyMillis = Math.max(T_THRESHOLD - elapsed, 0);
        if (earlyMillis > 0) {
          setTimeout(_ => {
            // ad($$('control-center-spinner'), 'ninja');
            ad($$('sonic-linear-waiting'), 'ninja');
          }, earlyMillis);
        } else {
          // ad($$('control-center-spinner'), 'ninja');
          ad($$('sonic-linear-waiting'), 'ninja');
        }

        if (updateHistory) {
          window.history.pushState({}, '', url);
        }
      });
  };
  var rings = document.querySelectorAll('[data-sonic]');
  var i = rings.length;
  {{if .SpaEnabled}}
  while (i--) l(rings[i], 'click', e => { // surprisingly works with keyboard nav, too.
    e.preventDefault();
    // TODO: handle anchors. lets say we navigate then come back to original url. window.location.href is still pegged.
    if (e.target.href != window.location.href) $onic(e.target.href, true);
  });
  l(window, 'popstate', e => e.state && $onic(window.location.href, false));
  {{end}}
  // TODO: add a mouse spinner icon
  // TODO: maintain cache.
  // TODO: restore scroll state.
</script>
{{end}}